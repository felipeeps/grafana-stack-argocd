apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: kube-prometheus-stack
  namespace: argocd
  labels:
    name: observability
  finalizers:
    - resources-finalizer.argocd.argoproj.io
spec:
  project: default
  syncPolicy:
    syncOptions:
      - ApplyOutOfSyncOnly=true
      - PrunePropagationPolicy=background
      - CreateNamespace=true
  source:
    chart: kube-prometheus-stack
    repoURL: "https://prometheus-community.github.io/helm-charts"
    targetRevision: 39.9.0
    helm:
      parameters:
      # Resources
        ## Grafana
        - name: grafana.resources.requests.memory
          value: "512Mi"
        - name: grafana.resources.limits.memory
          value: "1024Mi"
        - name: grafana.resources.requests.cpu
          value: "250m"
        - name: grafana.resources.limits.cpu
          value: "350m"

        ## Prometheus
        - name: prometheusOperator.resources.requests.memory
          value: "256Mi"
        - name: prometheusOperator.resources.limits.memory
          value: "512m"
        - name: prometheusOperator.resources.requests.cpu
          value: "100m"
        - name: prometheusOperator.resources.limits.cpu
          value: "200m"

        - name: prometheus-node-exporter.resources.requests.memory
          value: "100Mi"
        - name: prometheus-node-exporter.resources.limits.memory
          value: "150Mi"
        - name: prometheus-node-exporter.resources.requests.cpu
          value: "40m"
        - name: prometheus-node-exporter.resources.limits.cpu
          value: "160m"

        - name: kube-state-metrics.resources.requests.memory
          value: "64Mi"
        - name: kube-state-metrics.resources.limits.memory
          value: "100Mi"
        - name: kube-state-metrics.resources.requests.cpu
          value: "25m"
        - name: kube-state-metrics.resources.limits.cpu
          value: "50m"

        ## Alert Manager
        - name: alertmanager.alertmanagerSpec.resources.requests.memory
          value: "100Mi"
        - name: alertmanager.alertmanagerSpec.resources.limits.memory
          value: "150Mi"
        - name: alertmanager.alertmanagerSpec.resources.requests.cpu
          value: "50m"
        - name: alertmanager.alertmanagerSpec.resources.limits.cpu
          value: "100m"

      values: |-
        nodeSelector: {"node-tag": "node-name"}
        grafana:
            ingress:
              enabled: true
              annotations: { kubernetes.io/ingress.class: nginx }
              labels: {}
              hosts: [grafana.url.com]
              path: /
              pathType: Prefix
            persistence:
              enabled: true
              type: pvc
              storageClassName: gp3
              accessModes:
              - ReadWriteOnce
              size: 20Gi
              finalizers:
              - kubernetes.io/pvc-protection
            grafana.ini:
              server:
                domain: grafana.url.com
                root_url: http://grafana.url.com
              feature_toggles:
                enable: tempoSearch tempoBackendSearch tempoApmTable
              auth:
                org_name: Organization
                org_role: Editor
        prometheus:
            ingress:
              enabled: true
              annotations: { kubernetes.io/ingress.class: nginx }
              labels: {}
              hosts: [prometheus.url.com]
              path: /
              pathType: ImplementationSpecific
            prometheusSpec:
              storageSpec:
                volumeClaimTemplate:
                  spec:
                    storageClassName: gp3
                    accessModes: ["ReadWriteOnce"]
                    resources:
                      requests:
                        storage: 30Gi
  destination:
    server: "https://kubernetes.default.svc"
    namespace: observability
